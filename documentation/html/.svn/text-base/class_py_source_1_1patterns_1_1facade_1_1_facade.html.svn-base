<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>GeneticTreeProject: PySource::patterns::facade::Facade Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.3 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">GeneticTreeProject&#160;<span id="projectnumber">2.0</span></div>
   <div id="projectbrief">This code will create a tree representing the genetic relationship between different dna sequences.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="classes.html"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespace_py_source.html">PySource</a>      </li>
      <li class="navelem"><a class="el" href="namespace_py_source_1_1patterns.html">patterns</a>      </li>
      <li class="navelem"><b>facade</b>      </li>
      <li class="navelem"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<h1>PySource::patterns::facade::Facade Class Reference</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="PySource::patterns::facade::Facade" --><div class="dynheader">
Inheritance diagram for PySource::patterns::facade::Facade:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_py_source_1_1patterns_1_1facade_1_1_facade.png" usemap="#PySource::patterns::facade::Facade_map" alt=""/>
  <map id="PySource::patterns::facade::Facade_map" name="PySource::patterns::facade::Facade_map">
<area href="class_py_source_1_1main_1_1_entry_point.html" alt="PySource::main::EntryPoint" shape="rect" coords="0,56,213,80"/>
</map>
 </div></div>

<p><a href="class_py_source_1_1patterns_1_1facade_1_1_facade-members.html">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#ac91708cbb6743e7a36e1f6886ddbe555">getInstance</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> Implement the singleton design.  <a href="#ac91708cbb6743e7a36e1f6886ddbe555"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5d16c68de048f63e93a2bdf019119025"></a><!-- doxytag: member="PySource::patterns::facade::Facade::__new__" ref="a5d16c68de048f63e93a2bdf019119025" args="" -->
def&#160;</td><td class="memItemRight" valign="bottom"><b>__new__</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2">initializeFacade</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the initial state for the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a>.  <a href="#aba0586dca3e8e6dc78ddfdd5895d7cf2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a6e2e86413be200f13c60bc631eaf2cfe">initializeController</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Called by the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2">initializeFacade</a> method to initiate the Controller at startup time, can be overridden in the subclass of <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> to handle different Controller initialization.  <a href="#a6e2e86413be200f13c60bc631eaf2cfe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aef044aa816325e6114ac14f2a2e6bb53">initializeModel</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Called by the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2">initializeFacade</a> method to initiate the Model as startup, can be overridden in the subclass of <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> to handle program specific Model initialization.  <a href="#aef044aa816325e6114ac14f2a2e6bb53"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a00fc5547e3915a2bb83d28f0afd9fd25">initializeView</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Called by the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2">initializeFacade</a> method to initiate the View as startup, can be overridden in the subclass of <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> to handle program specific View initialization.  <a href="#a00fc5547e3915a2bb83d28f0afd9fd25"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aed05630f5323724ea750ded0c9687c44">registerCommand</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Map an Command with the Controller by accessible by the Notification's name.  <a href="#aed05630f5323724ea750ded0c9687c44"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aae71daf9451fc0a4d3f424494f3240b9">removeCommand</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove the Notification to Command mapping.  <a href="#aae71daf9451fc0a4d3f424494f3240b9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aefe961eccb87f53180788fccd297abff">hasCommand</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the Controller has a mapping to a specific Notification.  <a href="#aefe961eccb87f53180788fccd297abff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a5806038f9de3f6bb5acdf09b7ab1ca22">registerProxy</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Maps a Proxy to its name so that it can be access via the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a>.  <a href="#a5806038f9de3f6bb5acdf09b7ab1ca22"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a0a684b422b7d0b2ec33f589388578ea6">retrieveProxy</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Proxy object associated with the name.  <a href="#a0a684b422b7d0b2ec33f589388578ea6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a220599ed48d3b82d650f8cb59d1d5ef9">removeProxy</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Unmaps the Proxy with it's name.  <a href="#a220599ed48d3b82d650f8cb59d1d5ef9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a813f4901a415e8afa1005b78c72f2994">hasProxy</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the Model has a mapping to a specific Proxy.  <a href="#a813f4901a415e8afa1005b78c72f2994"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a7a76a9c7b3c349490ee2a59127fcd77f">registerMediator</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Maps a Mediator to its name so that it can be access via the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a>.  <a href="#a7a76a9c7b3c349490ee2a59127fcd77f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a93e97963cbe02337187653294e27d9df">retrieveMediator</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Mediator object associated with the name.  <a href="#a93e97963cbe02337187653294e27d9df"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a7faf1a07ec067eea7e4c052f701494ee">removeMediator</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Unmaps the Mediator with it's name.  <a href="#a7faf1a07ec067eea7e4c052f701494ee"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a70a8e9cdb5ec8b53f8fef31b101202ab">hasMediator</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the View has a mapping to a specific Mediator.  <a href="#a70a8e9cdb5ec8b53f8fef31b101202ab"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#ae2897c2206ee6cb4e422c6e4b4bf1099">sendNotification</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new Notification and send it to all listeners.  <a href="#ae2897c2206ee6cb4e422c6e4b4bf1099"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#ac9bba778d473e1ae660655a4fd907764">notifyObservers</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows for sending of custom Notification classes using the facade if it requires more than just the name and the body.  <a href="#ac9bba778d473e1ae660655a4fd907764"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a6d843600395a15b6282ec84dd3ac1595">instance</a> = None</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> is responsible for the following tasks: Initializing the Model, View and Controller Singletons.  <a href="#a6d843600395a15b6282ec84dd3ac1595"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aac050dc09adb0a2c6934a995a709244b"></a><!-- doxytag: member="PySource::patterns::facade::Facade::controller" ref="aac050dc09adb0a2c6934a995a709244b" args="" -->
&#160;</td><td class="memItemRight" valign="bottom"><b>controller</b> = None</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3ebe22d8eed1a33915753ecbb59bc541"></a><!-- doxytag: member="PySource::patterns::facade::Facade::model" ref="a3ebe22d8eed1a33915753ecbb59bc541" args="" -->
&#160;</td><td class="memItemRight" valign="bottom"><b>model</b> = None</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a434d65a066eb04938f99f238336fc98a"></a><!-- doxytag: member="PySource::patterns::facade::Facade::view" ref="a434d65a066eb04938f99f238336fc98a" args="" -->
&#160;</td><td class="memItemRight" valign="bottom"><b>view</b> = None</td></tr>
</table>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ac91708cbb6743e7a36e1f6886ddbe555"></a><!-- doxytag: member="PySource::patterns::facade::Facade::getInstance" ref="ac91708cbb6743e7a36e1f6886ddbe555" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::getInstance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> Implement the singleton design. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the single instance of <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> </dd></dl>

<p>Reimplemented in <a class="el" href="class_py_source_1_1main_1_1_entry_point.html#aecaed2f435d479c27d3242943b885986">PySource::main::EntryPoint</a>.</p>

</div>
</div>
<a class="anchor" id="aefe961eccb87f53180788fccd297abff"></a><!-- doxytag: member="PySource::patterns::facade::Facade::hasCommand" ref="aefe961eccb87f53180788fccd297abff" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::hasCommand </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>notificationName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns if the Controller has a mapping to a specific Notification. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">notificationName,:</td><td>the name of the Notification to be checked for mapping. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a70a8e9cdb5ec8b53f8fef31b101202ab"></a><!-- doxytag: member="PySource::patterns::facade::Facade::hasMediator" ref="a70a8e9cdb5ec8b53f8fef31b101202ab" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::hasMediator </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mediatorName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns if the View has a mapping to a specific Mediator. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">notificationName,:</td><td>the name of the Mediator to be checked for mapping. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a813f4901a415e8afa1005b78c72f2994"></a><!-- doxytag: member="PySource::patterns::facade::Facade::hasProxy" ref="a813f4901a415e8afa1005b78c72f2994" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::hasProxy </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>proxyName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns if the Model has a mapping to a specific Proxy. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">notificationName,:</td><td>the name of the Proxy to be checked for mapping. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6e2e86413be200f13c60bc631eaf2cfe"></a><!-- doxytag: member="PySource::patterns::facade::Facade::initializeController" ref="a6e2e86413be200f13c60bc631eaf2cfe" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::initializeController </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Called by the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2">initializeFacade</a> method to initiate the Controller at startup time, can be overridden in the subclass of <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> to handle different Controller initialization. </p>
<p>Use to map Command and Notification objects ensuring that this structure is created during the startup phase of run time. </p>

<p>Reimplemented in <a class="el" href="class_py_source_1_1main_1_1_entry_point.html#a3a21a84da7f8e3913686e73286226d32">PySource::main::EntryPoint</a>.</p>

</div>
</div>
<a class="anchor" id="aba0586dca3e8e6dc78ddfdd5895d7cf2"></a><!-- doxytag: member="PySource::patterns::facade::Facade::initializeFacade" ref="aba0586dca3e8e6dc78ddfdd5895d7cf2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::initializeFacade </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the initial state for the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a>. </p>
<p>This is called automatically by the constructor, it must be overridden in the entry point to the program to provide additional state initialisation. When overridden, the subclass' method must call C{<a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2" title="Set the initial state for the Facade.">Facade.initializeFacade()</a>} to create the rest of the MVC design pattern. </p>

<p>Reimplemented in <a class="el" href="class_py_source_1_1main_1_1_entry_point.html#a31be5005f6045570fdda6a9aeb2493ca">PySource::main::EntryPoint</a>.</p>

</div>
</div>
<a class="anchor" id="aef044aa816325e6114ac14f2a2e6bb53"></a><!-- doxytag: member="PySource::patterns::facade::Facade::initializeModel" ref="aef044aa816325e6114ac14f2a2e6bb53" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::initializeModel </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Called by the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2">initializeFacade</a> method to initiate the Model as startup, can be overridden in the subclass of <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> to handle program specific Model initialization. </p>
<p>A better solution is to initialize the model by registering Proxy modules in a Command </p>

</div>
</div>
<a class="anchor" id="a00fc5547e3915a2bb83d28f0afd9fd25"></a><!-- doxytag: member="PySource::patterns::facade::Facade::initializeView" ref="a00fc5547e3915a2bb83d28f0afd9fd25" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::initializeView </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Called by the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#aba0586dca3e8e6dc78ddfdd5895d7cf2">initializeFacade</a> method to initiate the View as startup, can be overridden in the subclass of <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> to handle program specific View initialization. </p>
<p>A better solution is to initialize the view and map Mediator's and View modules in a Command </p>

</div>
</div>
<a class="anchor" id="ac9bba778d473e1ae660655a4fd907764"></a><!-- doxytag: member="PySource::patterns::facade::Facade::notifyObservers" ref="ac9bba778d473e1ae660655a4fd907764" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::notifyObservers </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>notification</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Allows for sending of custom Notification classes using the facade if it requires more than just the name and the body. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">notification,:</td><td>the INotification to have the View notify Observers of. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aed05630f5323724ea750ded0c9687c44"></a><!-- doxytag: member="PySource::patterns::facade::Facade::registerCommand" ref="aed05630f5323724ea750ded0c9687c44" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::registerCommand </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>notificationName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>commandClassRef</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Map an Command with the Controller by accessible by the Notification's name. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">notificationName,:</td><td>the name of the Notification to associate with the Command </td></tr>
    <tr><td class="paramname">commandClassRef,:</td><td>a reference to the Class of the Command </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7a76a9c7b3c349490ee2a59127fcd77f"></a><!-- doxytag: member="PySource::patterns::facade::Facade::registerMediator" ref="a7a76a9c7b3c349490ee2a59127fcd77f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::registerMediator </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mediator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Maps a Mediator to its name so that it can be access via the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">proxy,:</td><td>the Mediator object to be mapped. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5806038f9de3f6bb5acdf09b7ab1ca22"></a><!-- doxytag: member="PySource::patterns::facade::Facade::registerProxy" ref="a5806038f9de3f6bb5acdf09b7ab1ca22" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::registerProxy </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>proxy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Maps a Proxy to its name so that it can be access via the <a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">proxy,:</td><td>the Proxy object to be mapped. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aae71daf9451fc0a4d3f424494f3240b9"></a><!-- doxytag: member="PySource::patterns::facade::Facade::removeCommand" ref="aae71daf9451fc0a4d3f424494f3240b9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::removeCommand </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>notificationName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove the Notification to Command mapping. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">notificationName,:</td><td>the name of the Notification whose mapping will be removed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7faf1a07ec067eea7e4c052f701494ee"></a><!-- doxytag: member="PySource::patterns::facade::Facade::removeMediator" ref="a7faf1a07ec067eea7e4c052f701494ee" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::removeMediator </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mediatorName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unmaps the Mediator with it's name. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">proxyName,:</td><td>the Mediator object to be unmapped. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a220599ed48d3b82d650f8cb59d1d5ef9"></a><!-- doxytag: member="PySource::patterns::facade::Facade::removeProxy" ref="a220599ed48d3b82d650f8cb59d1d5ef9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::removeProxy </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>proxyName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unmaps the Proxy with it's name. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">proxyName,:</td><td>the Proxy object to be unmapped. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a93e97963cbe02337187653294e27d9df"></a><!-- doxytag: member="PySource::patterns::facade::Facade::retrieveMediator" ref="a93e97963cbe02337187653294e27d9df" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::retrieveMediator </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mediatorName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the Mediator object associated with the name. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">proxyName,:</td><td>the Mediator name be returned. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0a684b422b7d0b2ec33f589388578ea6"></a><!-- doxytag: member="PySource::patterns::facade::Facade::retrieveProxy" ref="a0a684b422b7d0b2ec33f589388578ea6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::retrieveProxy </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>proxyName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the Proxy object associated with the name. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">proxyName,:</td><td>the Proxy object be returned. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae2897c2206ee6cb4e422c6e4b4bf1099"></a><!-- doxytag: member="PySource::patterns::facade::Facade::sendNotification" ref="ae2897c2206ee6cb4e422c6e4b4bf1099" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PySource::patterns::facade::Facade::sendNotification </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>notificationName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>body</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a new Notification and send it to all listeners. </p>
<p>This creational pattern makes it so that a new Notification need not be created in the code sending the message.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">notificationName,:</td><td>the name of the Notification to send </td></tr>
    <tr><td class="paramname">body,:</td><td>the body of the Notification (optional) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a6d843600395a15b6282ec84dd3ac1595"></a><!-- doxytag: member="PySource::patterns::facade::Facade::instance" ref="a6d843600395a15b6282ec84dd3ac1595" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html#a6d843600395a15b6282ec84dd3ac1595">PySource::patterns::facade::Facade::instance</a> = None<code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="class_py_source_1_1patterns_1_1facade_1_1_facade.html">Facade</a> is responsible for the following tasks: Initializing the Model, View and Controller Singletons. </p>
<p>Provide global access to all of the methods provided by Model, View and Controller. Provide the ability to override the built in MVC methods. Provide a single communication hub for registering Commands and notifying Observers</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_source_1_1core_1_1_model.html" title="Model is responsible for the following tasks:Providing access to the Proxy instances for the rest of ...">core.Model</a> </dd>
<dd>
<a class="el" href="class_py_source_1_1core_1_1_view.html" title="View is responsible for the following tasks:Providing access to the Mediator instances for the rest o...">core.View</a> </dd>
<dd>
<a class="el" href="class_py_source_1_1comm_1_1observer_1_1_observer.html" title="Encapsulates information about objects listening for Notifications to be broadcast.">comm.observer.Observer</a> </dd>
<dd>
<a class="el" href="class_py_source_1_1core_1_1_controller.html" title="Controller is responsible for the following tasks:Maintaining the maps from Notifications to Commands...">core.Controller</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>patterns/facade.py</li>
</ul>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Sun May 8 2011 02:16:54 for GeneticTreeProject by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </small></address>
</body>
</html>
